{"meta":{"title":"希尔的博客","subtitle":"兰之猗猗，扬扬其香。不采而佩，于兰何伤？","description":null,"author":"zshell.zhang","url":"https://zshell-zhang.github.io"},"pages":[{"title":"about me","date":"2016-07-05T07:21:04.000Z","updated":"2018-01-21T14:47:55.381Z","comments":true,"path":"about/index.html","permalink":"https://zshell-zhang.github.io/about/index.html","excerpt":"","text":"我坠入了一个全栈式陷阱: 在T型技术理论的指导下, 不断在那一条横上筑底, 然未能找到合适的支点累起那一道竖;时不我待, 毕竟技术不是股市, 横有多长, 竖未必有多高; 联系方式微信 : &nbsp;XaaService 手机 : 18513585440 邮箱 : zshell.zhang@qunar.com&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xaaservice@gmail.com 职业状态2016 年 6 月毕业;2016.7 - 至今: 去哪儿网 dev;"},{"title":"categories","date":"2016-08-01T11:40:08.000Z","updated":"2018-01-20T13:49:27.734Z","comments":false,"path":"categories/index.html","permalink":"https://zshell-zhang.github.io/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2016-07-05T13:58:26.000Z","updated":"2018-01-20T13:49:10.626Z","comments":true,"path":"tags/index.html","permalink":"https://zshell-zhang.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"logrotate 配置与运维","slug":"linux-varlog--logrotate配置与运维","date":"2018-01-14T16:23:27.000Z","updated":"2018-01-21T04:55:47.329Z","comments":true,"path":"2018/01/15/linux-varlog--logrotate配置与运维/","link":"","permalink":"https://zshell-zhang.github.io/2018/01/15/linux-varlog--logrotate配置与运维/","excerpt":"本文主要讨论以下几个方面: logrotate 的关键配置文件和配置项语法; logrotate 的使用与运维技巧; logrotate 的运行原理; 特殊场景下 logrotate 的代替方案;","text":"本文主要讨论以下几个方面: logrotate 的关键配置文件和配置项语法; logrotate 的使用与运维技巧; logrotate 的运行原理; 特殊场景下 logrotate 的代替方案; 配置文件与配置语法logrotate 的配置文件主要是 /etc/logrotate.conf 和 /etc/logrotate.d 目录;/etc/logrotate.conf 文件作为主配置文件, include 了 /etc/logrotate.d 目录下具体的配置内容;以下是 /etc/logrotate.conf 的默认内容:123456789101112# 默认的历史日志保留周期单位: 周weekly# 历史日志保留四个周期单位, 即四周, 一个月rotate 4# use the syslog group by default, since this is the owning group of /var/log/syslog.su root syslog# 当旧日志作了 rotate 之后, 将会创建一个和旧日志同名的新文件create# 默认使用 gzip 压缩旧日志文件compress# 将 /etc/logrotate.d 下面的所有独立配置文件都 include 进来include /etc/logrotate.d /etc/logrotate.conf 的默认配置优先级比 /etc/logrotate.d/ 目录下的独立配置要低, /etc/logrotate.d 下所有的独立配置文件中的配置项可以覆盖 /etc/logrotate.conf;以 rsyslog 的配置文件为例, 以下是 /etc/logrotate.d/rsyslog 的内容:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950/var/log/syslog &#123; # 以 天 为周期单位, 保留 7 天的日志 daily rotate 7 # 忽略任何错误, 比如找不到文件 missingok # not if empty, 当日志内容为空时, 不作 rotate notifempty # 压缩日志, 但是采用延时压缩, 即本轮周期产生的日志不压缩, 而在下一个周期时压缩之 compress delaycompress # postrotate/endscript 内的命令, 作为后处理, 会在本轮周期 rotate 之后回调执行 postrotate invoke-rc.d rsyslog rotate &gt; /dev/null endscript&#125;# 可以同时指定多个目标日志使用同一段配置/var/log/mail.info/var/log/mail.warn/var/log/mail.err/var/log/mail.log/var/log/daemon.log/var/log/kern.log/var/log/auth.log/var/log/user.log/var/log/lpr.log/var/log/cron.log/var/log/debug/var/log/messages &#123; weekly rotate 4 missingok notifempty compress delaycompress # 共享处理脚本, 仅对 prerotate/postrotate 定义时生效 sharedscripts postrotate invoke-rc.d rsyslog rotate &gt; /dev/null endscript&#125; 注意: sharedscripts 选项打开后, 所有使用该段配置作 rotate 的目标日志名都会作为参数一次性传给 prerotate/postrotate;而默认的选项 nosharedscripts 则是将每一个日志名分别作为参数传给 prerotate/postrotate; logrotate 支持的周期单位, 有 hourly, daily, weekly, monthly; 但是这里有坑: hourly 默认是不生效的, 具体原因见本文第三节; &nbsp;如上所叙, prerotate/postrotate 是一种在 rotate 过程中某个时机回调的一段脚本, 像这样类似的配置项总共有如下几种 (所有的配置项必须与 endscript 成对出现):1234567891011# 在所有匹配的日志 rotate 之前, 仅执行一次firstaction/endscript# 在日志 rotate 之前回调prerotate/endscript# 在日志 rotate 之后回调postrotate/endscript# 在所有匹配的日志 rotate 之后, 仅执行一次lastaction/endscript# 在某个日志将要被删除之前回调执行preremove/endscript 这几种回调时间点的设计, 不禁让人想到 junit 测试类几种注解的方法执行时机, 不得不说有异曲同工之妙;&nbsp;rsyslog 的 logrotate 配置是一个典型, 但同时 logrotate 还有着其他的个性化配置选项:1234567891011121314151617# 以下是另一段案例/var/log/test.log &#123; # 不以时间为周期单位, 而是以 日志size 为周期单位, 当日志大小达到 100MB 时, 作一次 rotate, 日志保留 5 个周期 size=100M rotate 5 # 使用日期命名 rotate 后的旧文件, 日期格式采用 -%Y-%m-%d dateext dateformat -%Y-%m-%d # 以指定的权限掩码, owner/group 创建 rotate 后的新文件 create 644 root root postrotate /usr/bin/killall -HUP rsyslogd endscript&#125; logrotate 命令的常用运维选项1.指定目标配置文件, 手动执行:1234# 将会执行 /etc/logrotate.d/ 下所有的配置logrotate /etc/logrotate.conf# 将会只执行指定配置文件中的配置logrotate /etc/logrotate.d/xxx.log 2.debug 验证配置文件正误:123456789# -d: --debug&gt; logrotate -d /etc/logrotate.d/redis-server.log# outputreading config file /etc/logrotate.d/redis-serverHandling 1 logsrotating pattern: /var/log/redis/redis-server*.log weekly (12 rotations)empty log files are not rotated, old logs are removedconsidering log /var/log/redis/redis-server.log log does not need rotating 3.强制 rotate:即便当前不满足 rotate 的条件, force rotate 也会强制作一次 rotate, 而那些超过指定轮数的旧日志将会被删除;force rotate 比较适用于加入了新的配置文件, 需要对其存量历史立即作一次 rotate;12# -f: --forcelogrotate -f /etc/logrotate.d/xxx.log 4.verbose 详细信息:12# -v: --verboselogrotate -vf /etc/logrotate.d/xxx.log 5.指定 logrotate 自身的日志文件路径:123# -s: --state# 默认 logrotate 的日志路径: /var/lib/logrotate/statuslogrotate -s /tmp/logrotate.log /etc/logrotate.conf logrotate 的运行原理及其缺陷logrotate 并不是一个 daemon service, 其本质上只是一个 ‘什么时候调用就什么时候立即执行一次’ 的 C 程序;所以 logrotate 的执行, 依赖于其他 daemon service 的调用, 那么最自然的就是通过 crond 定时任务来调用了;默认情况下, logrotate 是一天被调用一次的, 因为与它相关的 crontab 配置在 /etc/cron.daily 里:1234567891011121314#!/bin/sh# Clean non existent log file entries from status filecd /var/lib/logrotatetest -e status || touch statushead -1 status &gt; status.cleansed 's/\"//g' status | while read logfile datedo [ -e \"$logfile\" ] &amp;&amp; echo \"\\\"$logfile\\\" $date\"done &gt;&gt; status.cleanmv status.clean statustest -x /usr/sbin/logrotate || exit 0/usr/sbin/logrotate /etc/logrotate.conf 如本文第二节所述, 由于 logrotate 的执行方式是通过 cron 默认 1 天执行一次, 所以按小时 rotate 的 hourly 配置项, 默认是不生效的; logrotate 的 manual 文档里也有说明: hourly Log files are rotated every hour. Note that usually logrotate is configured to be run by cron daily. You have to change this configuration and run logrotate hourly to be able to really rotate logs hourly. 不过, 这还不是最大的问题, 毕竟我们只要把上述脚本放到 cron.hourly 里, 就能解决该问题;这种靠定时任务来运行的方式, 最大的问题是: 当我们对某个日志配置成按 size 来 rotate 时, 无法做到当日志触达 size 条件时及时切分, 其所能实现的最小延时是一分钟 (当把 logrotate 脚本的定时任务配成 * * * * *, 即每分钟执行一次时), 没法更短了; 其他的特殊场景logrotate 集日志切分, 日志压缩, 删除旧日志, 邮件提醒等功能为一体, 提供了非常完整的日志管理策略; 不过, 并不是所有的系统日志, 自身都不具有上述功能, 都需要依赖 logrotate 来管理自己;有一个非常典型, 而且使用十分广泛的场景: tomcat web 服务器; 当我们在 tomcat 上部署的服务使用了诸如 logback 之类的第三方日志框架时, 日志切分, 日志压缩等服务它自己便能够胜任了 (与 logback 相关功能的文章请见: logback appender 使用总结), 而且我们绝大部分人 (去哪儿网), 即便不怎么接触 logback 的日志压缩功能, 也至少都习惯于使用 logback RollingFileAppender 的基础功能去作日志切分;基于以上, 我们只需要一个简单的脚本, 便能够满足日常的 tomcat web 服务器日志运维:12345678#!/bin/bashHOUR1=$(date -d \"1 hours ago\" +%F-%H)DATE7=$(date -d \"7 days ago\" +%F-%H)# for example: /home/web/my_server/logsfor i in `find /home/web/ -maxdepth 2 \\( -type d -o -type l \\) -name logs`; do find -L $i -maxdepth 1 -type f \\( -name \"*$&#123;HOUR1&#125;*\" -a ! -name \"*.gz\" \\) -exec gzip &#123;&#125; \\; find -L $i -maxdepth 1 -type f \\( -name \"*$&#123;DATE7&#125;*\" -a -name \"*.gz\" \\) -exec rm -f &#123;&#125; \\;done 本节内容讨论的是针对 tomcat web 系统上的日志切分, 压缩, 以及删除等常规运维内容; 其实, 针对公司各业务线 web 系统的业务日志, 除此之外至少还有另外两项重要的运维内容: 日志冷备份收集 与 日志实时收集及其可视化 (ELK); 与之相关的内容请参见如下文章: 改造 flume-ng: 融入公司的技术体系; 日志冷备份收集的方案选型; 站内相关文章 cron 相关全梳理 logback appender 使用总结 改造 flume-ng: 融入公司的技术体系 日志冷备份收集的方案选型 参考链接 Linux日志文件总管——logrotate 被遗忘的 Logrotate","categories":[{"name":"linux","slug":"linux","permalink":"https://zshell-zhang.github.io/categories/linux/"},{"name":"varlog","slug":"linux/varlog","permalink":"https://zshell-zhang.github.io/categories/linux/varlog/"}],"tags":[{"name":"linux:varlog","slug":"linux-varlog","permalink":"https://zshell-zhang.github.io/tags/linux-varlog/"}]},{"title":"财富先锋 2017 年各股池成绩单","slug":"证券-财富先锋--财富先锋2017年各股池成绩单","date":"2017-12-31T14:00:00.000Z","updated":"2018-01-21T07:31:37.769Z","comments":true,"path":"2017/12/31/证券-财富先锋--财富先锋2017年各股池成绩单/","link":"","permalink":"https://zshell-zhang.github.io/2017/12/31/证券-财富先锋--财富先锋2017年各股池成绩单/","excerpt":"综合来看, 同花顺财富先锋 2017 年的几个股池系统的年度收益率还是比较令人满意的;‘热点轮动’, ‘股东增持’ 两个股池系统的收益率达到了 200%, ‘支撑压力’ 股池系统的收益率超过 150%;不过 ‘多头趋势’ 股池系统的表现比较糟糕, 2017 年净收益为负;另外还有 ‘深一度’ 股池系统的收益率未显示相关指标, 暂无法统计;各个股池系统 2017 年度收益率的指标, 反映出了各个选股策略在 2017 年 A 股市场上的成效; 以此为鉴, 2018 年的中国资本市场, 我们继续前行;","text":"综合来看, 同花顺财富先锋 2017 年的几个股池系统的年度收益率还是比较令人满意的;‘热点轮动’, ‘股东增持’ 两个股池系统的收益率达到了 200%, ‘支撑压力’ 股池系统的收益率超过 150%;不过 ‘多头趋势’ 股池系统的表现比较糟糕, 2017 年净收益为负;另外还有 ‘深一度’ 股池系统的收益率未显示相关指标, 暂无法统计;各个股池系统 2017 年度收益率的指标, 反映出了各个选股策略在 2017 年 A 股市场上的成效; 以此为鉴, 2018 年的中国资本市场, 我们继续前行; 支撑压力 2017 支撑压力 final review 热点轮动 2017 热点轮动 final review 股东增持 2017 股东增持 final review 多头趋势 2017 多头趋势 final review","categories":[{"name":"证券","slug":"证券","permalink":"https://zshell-zhang.github.io/categories/证券/"},{"name":"财富先锋","slug":"证券/财富先锋","permalink":"https://zshell-zhang.github.io/categories/证券/财富先锋/"}],"tags":[{"name":"证券:财富先锋","slug":"证券-财富先锋","permalink":"https://zshell-zhang.github.io/tags/证券-财富先锋/"}]},{"title":"bash 结束死循环的方法","slug":"linux-shell--bash结束死循环的方法","date":"2017-11-04T16:00:00.000Z","updated":"2018-01-02T15:41:21.515Z","comments":true,"path":"2017/11/05/linux-shell--bash结束死循环的方法/","link":"","permalink":"https://zshell-zhang.github.io/2017/11/05/linux-shell--bash结束死循环的方法/","excerpt":"linux 中有很多实用的工具, 采用了这样一种工作方式:定时执行(1/s, 1/3s 等)一次指定逻辑, 当用户按下 ctrl + c 发出 SIGINT 信号时, 结束进程; 如果接收不到 SIGINT/SIGTERM 等信号, 进程则会一直执行下去;类似的工具包括 ioutil, jmap 等;本文整理了实现上述逻辑的一些典型方法;","text":"linux 中有很多实用的工具, 采用了这样一种工作方式:定时执行(1/s, 1/3s 等)一次指定逻辑, 当用户按下 ctrl + c 发出 SIGINT 信号时, 结束进程; 如果接收不到 SIGINT/SIGTERM 等信号, 进程则会一直执行下去;类似的工具包括 ioutil, jmap 等;本文整理了实现上述逻辑的一些典型方法; 方法1: 监听命令返回值根据 GNU 相关规范, 如果一个进程是由于响应信号 signal 而终止, 其返回码必须是 128 + signal_number;那么, 可以通过判断其返回码 $? 是否大于 128 而判断 COMMAND 是否响应了信号;1234while [ 1 ]; do COMMAND test $? -gt 128 &amp;&amp; breakdone 更精确的, 如果只想判断 COMMAND 是否响应了 SIGINT 信号, 可以直接判断:12# SIGINT = 2, 128 + SIGINT = 130test $? -eq 130 &amp;&amp; break 特殊的情况下, COMMAND 忽略了 SIGINT 信号, 可以使用 -e 选项强制其响应 SIGINT 信号:1234while [ 1 ]; do COMMAND -e test $? -gt 128 &amp;&amp; breakdone 方法2: 命令返回值短路方法2 是方法1 的简化版本:123while [ 1 ]; do COMMAND -e || breakdone 其本质是监听 COMMAND 的返回值 $? 是否为 0, 如果是 0, 那么 break 中断命令就被短路了; 如果是非 0, 便会执行 break, 跳出死循环;这种方法巧妙得使用 || 逻辑运算符简化了代码, 但是有一个缺陷: 当 COMMAND 并非因为响应 ctrl + c 而是其他错误返回了非 0 的状态时, 循环也会结束;这是方法2 相比 方法1 略显不精准的地方; 方法3: 使用 trap 捕获信号12345# 捕获到 SIGINT 即 exit 0 正常退出trap &quot;exit 0&quot; SIGINTwhile [ 1 ]; do COMMAND -edone 方法4: 使用 ctrl + z 配合 SIGTERM 信号当命令运行在前台, 使用 ctrl + z 挂起进程, 会得到以下输出:12345678910# ^Z[1]+ Stopped COMMAND# 1 是挂起进程的作业号(job number), kill [job_number] 会向该作业发送 SIGtERM 信号kill %1# 发送 SIGTERM 信号给最近一次被挂起的进程kill %%# 执行的结果[1]+ Terminated COMMAND 方法5: 使用 -e 选项使用 set -e, 开启命令返回码校验功能, 一旦 COMMAND 返回非 0, 立即结束进程;12345#!/bin/bashset -ewhile [ 1 ]; do COMMAND -edone 或者作为 bash 的参数:1234#!/bin/bash -ewhile [ 1 ]; do COMMAND -edone 参考链接 Terminating an infinite loop 3.7.5 Exit Status How to stop the loop bash script in terminal Unix/Linux 脚本中 “set -e” 的作用","categories":[{"name":"linux","slug":"linux","permalink":"https://zshell-zhang.github.io/categories/linux/"},{"name":"shell","slug":"linux/shell","permalink":"https://zshell-zhang.github.io/categories/linux/shell/"}],"tags":[{"name":"linux:shell","slug":"linux-shell","permalink":"https://zshell-zhang.github.io/tags/linux-shell/"}]},{"title":"ulimit 调参与优化","slug":"linux-conf--ulimit调参与优化","date":"2017-10-28T15:23:05.000Z","updated":"2018-01-21T13:37:26.949Z","comments":true,"path":"2017/10/28/linux-conf--ulimit调参与优化/","link":"","permalink":"https://zshell-zhang.github.io/2017/10/28/linux-conf--ulimit调参与优化/","excerpt":"ulimit 未正确设置是很多线上故障的根源:Too many open files;java.lang.OutOfMemoryError: unable to create new native thread;对于生产环境来说, ulimit 的调参优化至关重要;本文详细介绍并梳理一下与 ulimit 相关的林林总总;","text":"ulimit 未正确设置是很多线上故障的根源:Too many open files;java.lang.OutOfMemoryError: unable to create new native thread;对于生产环境来说, ulimit 的调参优化至关重要;本文详细介绍并梳理一下与 ulimit 相关的林林总总; ulimit 是 linux 对于每个通过 PAM 登录的用户 ( 每个进程 ) 的资源最大使用限制的设置;注意, 这里仅仅对通过 PAM 登陆的用户起作用, 而对于那些随系统启动而启动的 daemon service, ulimit 是不会去限制其资源使用的;在 /etc/security/limits.conf 文件中的第一段注释如下: This file sets the resource limits for the users logged in via PAM.It does not affect resource limits of the system services. 关于 linux PAM 相关的内容, 可以前往另外一篇文章: pam 认证与配置; ulimit 基本信息123456789101112131415161718# 查看所有 ulimit 设置&gt; ulimit -acore file size (blocks, -c) 0data seg size (kbytes, -d) unlimitedscheduling priority (-e) 0file size (blocks, -f) unlimitedpending signals (-i) 15018max locked memory (kbytes, -l) 64 # 每个进程可以锁住而不被 swap 出去的内存max memory size (kbytes, -m) unlimited # 每个进程可使用的最大内存大小open files (-n) 1024 # 每个进程可打开的文件数pipe size (512 bytes, -p) 8POSIX message queues (bytes, -q) 819200real-time priority (-r) 0stack size (kbytes, -s) 8192 # 每个进程可使用的最大堆栈大小cpu time (seconds, -t) unlimitedmax user processes (-u) 4096 # 每个用户的最大进程数virtual memory (kbytes, -v) unlimitedfile locks (-x) unlimited ulimit 需要优化的场景及待优化参数linux 默认的 ulimit 限制, 是出于安全考虑, 设置的有些保守; 实际的生产环境下, 往往需要对其作出适当的调整, 方可发挥机器的最大性能; 场景1: tomcat web 容器 一台 4C4G60G 的标准虚拟主机, 其上部署了一个 tomcat 实例, 启动 catalina 进程的是 tomcat:tomcat 用户;如果该服务是一个网络 IO 密集的应用, 需要打开的 socket file 远不止 1024, ulimit 设置的 max open files 就会限制其性能; 另外, 该主机只部署了这一个服务, tomcat 用户是唯一一个需要占用大量资源的用户, ulimit 对单个用户的限制便会造成机器资源闲置, 极低的使用率, 降低 web 服务的性能;所以, 可以对该机器的 ulimit 作出如下调整:1231. max memory size -&gt; unlimit2. open files -&gt; 655363. stack size -&gt; unlimit 另外, 我们还遇到一种特殊的情况, 用标准配置虚拟机跑 dubbo 的服务治理: 当时发现, 如果服务注册到 zookeeper 的数量达到一定级别, 线上就会报 java.lang.OutOfMemoryError: unable to create new native thread 的异常;最后确定问题的原因是 ulimit -u max user processes 的数量配置过低, 增大后解决问题:14. max user processes -&gt; 65535 具体的情况可以参见这篇文章: dubbo 服务治理系统设计; 场景2: elasticsearch data node32C64G4T 的配置, 为确保指针压缩特性被打开, 一般我们都会控制 jvm 的最大堆内存与最小堆内存: ‘-Xmx30g -Xms30g’, 并希望能锁住所有的内存, 避免堆内存被 swap 到磁盘, 降低了搜索性能; 这种场景下我们当然不希望 ulimit 限制了 max memory size 以及 max locked memory;所以, 可以对该机器的 ulimit 作出如下调整:12341. max locked memory -&gt; unlimit2. max memory size -&gt; unlimit3. open files -&gt; 655364. stack size -&gt; unlimit 对于 max locked memory, elasticsearch.yml 本身有一个配置项 bootstrap.mlockall/bootstrap.memory_lock = true, 其背后实现就是通过类似于 ulimit -l unlimit 的方法完成的; 只是, elasticsearch 试图自己主动改变该配置能生效的前提, 是 ulimit 配置文件里要允许其这样设置, 具体的逻辑请看本文下下节: ulimit 的永久修改; &nbsp;另外, 还有其他的一些场景, 可能需要调整其他参数以作优化, 此处不一而论;以上是需要调整 ulimit 参数的场景举例, 下面的内容是关于如何 临时/永久 修改 ulimit 设置; ulimit 当前 session 下的临时修改ulimit 的临时调整, 只对当前 session 下的当前用户, 以及当前用户所起的进程生效;其调整方法也已经在 ulimit -a 中被注明了:123456789# max locked memulimit -l unlimit# max mem sizeulimit -m unlimit# open filesulimit -n 65536# max user processesulimit -u 65536... ulimit 的永久修改上一节的方法, 只能在当前 session 下对当前用户作临时调整, 而 要想对 ulimit 作永久调整, 需要修改一些配置文件: /etc/security/limits.conf; /etc/security/limits.d 目录; 这些文件用于持久化每个用户的资源限制设置;其中, /etc/security/limits.conf 自不必说, 这是配置 ulimit 的主要文件:1234567891011121314151617181920212223242526272829303132domain 限制的目标: username 用户名; @groupname 组名, 需加 '@' 前缀; * 通配所有用户/组; %groupname 这种写法只能用于限制 某个 group 的 maxlogin limit, 即最大登陆用户数限制; type 限制的属性: `soft` 对 domain 给出的用户设置默认值; `hard` 限制 domain 给出的用户自己所能设置的最大值; `-` 将 soft 与 hard 都设为相同的值; item 限制的资源类型, 与 ulimit 所限制的资源类型大致相同: - core - limits the core file size (KB) - data - max data size (KB) - fsize - maximum filesize (KB) - memlock - max locked-in-memory address space (KB) - nofile - max number of open file descriptors - rss - max resident set size (KB) - stack - max stack size (KB) - cpu - max CPU time (MIN) - nproc - max number of processes - as - address space limit (KB) - maxlogins - max number of logins for this user - maxsyslogins - max number of logins on the system - priority - the priority to run user process with - locks - max number of file locks the user can hold - sigpending - max number of pending signals - msgqueue - max memory used by POSIX message queues (bytes) - nice - max nice priority allowed to raise to values: [-20, 19] - rtprio - max realtime priorityvalue 限制的具体值; 以下是一个具体的例子:1234567#&lt;domain&gt; &lt;type&gt; &lt;item&gt; &lt;value&gt;* soft nproc 65536* hard nproc 65536* - nofile 65536%guest - maxlogins 10elastic - memlock unlimit@dev hard fsize 10737418240 如上所示, 系统允许 elastic 用户的最大 memlock 为 unlimit, 如果这个值被设置为了一个比较小的值, 那么上上节 elasticsearch 试图将其改成 unlimit 便会失败; &nbsp;而对于 /etc/security/limits.d 目录的作用, /etc/security/limits.conf 文件中的第二段与第三段有如下注释: Also note that configuration files in /etc/security/limits.d directory,which are read in alphabetical order, override the settings in thisfile in case the domain is the same or more specific.&nbsp;That means for example that setting a limit for wildcard domain herecan be overriden with a wildcard setting in a config file in thesubdirectory, but a user specific setting here can be overriden onlywith a user specific setting in the subdirectory. 也就是说, limits.conf 配置文件, 可以在用户级别上被 limits.d 目录下的配置文件覆盖;举一个例子, 在 redhat/centos 各发行版本中, limits.d 目录下就有一个文件 20-nproc.conf:12345# Default limit for number of user's processes to prevent# accidental fork bombs.# See rhbz #432903 for reasoning.* soft nproc 4096root soft nproc unlimited 这里面对除了 root 用户之外的所有用户作了一个最大进程/线程数目的 soft 限制;如果修改 limits.conf 文件:1* hard nproc 65535 这时会发现, 除非自己试图 ulimit -u 修改 max processes, 否则这个值会依然被限制为 4096;而要想将该值默认放到 65535, 就必须修改 20-nproc.conf 文件方才生效; 永久修改生效的必要条件站内相关文章 pam 认证与配置 dubbo 服务治理系统设计 参考链接 ulimit 命令详解 linux /etc/security/limits.conf的相关说明","categories":[{"name":"linux","slug":"linux","permalink":"https://zshell-zhang.github.io/categories/linux/"},{"name":"conf","slug":"linux/conf","permalink":"https://zshell-zhang.github.io/categories/linux/conf/"}],"tags":[{"name":"linux:conf","slug":"linux-conf","permalink":"https://zshell-zhang.github.io/tags/linux-conf/"}]},{"title":"bash 数组与映射","slug":"linux-shell--bash数组与映射","date":"2017-10-22T15:32:19.000Z","updated":"2018-01-03T15:18:11.226Z","comments":true,"path":"2017/10/22/linux-shell--bash数组与映射/","link":"","permalink":"https://zshell-zhang.github.io/2017/10/22/linux-shell--bash数组与映射/","excerpt":"注: bash 映射 (map) 在文档里叫做 关联数组 (associated array), 使用关联数组的最低 bash 版本是 4.1.2;","text":"注: bash 映射 (map) 在文档里叫做 关联数组 (associated array), 使用关联数组的最低 bash 版本是 4.1.2; 数组/关联数组 的创建静态创建使用类型限定 declare 定义:123456# 数组declare -a array1=('a' 'b' 'c')declare -a array2=(a b c)# 关联数组declare -A map1=([\"a\"]=\"aa\" [\"b\"]=\"bb\" [\"c\"]=\"cc\")declare -A map2=([a]=aa [b]=bb [c]=cc) 如果不带类型限定, bash 不会自动推断 关联数组 类型:12object1=(a b c)object2=([\"a\"]=\"aa\" [\"b\"]=\"bb\" [\"c\"]=\"cc\") 对于以上两者, bash 都将推断为 普通数组 类型, 其中 object2 中有三个 string 元素: [“a”]=”aa”, [“b”]=”bb” 与 [“c”]=”cc”; 动态创建以上展示了 数组/动态数组 的静态创建方式;更复杂的场景是, 由一段其他复杂命令的输出, 赋值构建一个数组类型:1234567891011pair_array=(`sed -n -e '6,/&#125;/p' -e '$d' $&#123;formatted_curl_response_file&#125; | awk -F ':' '&#123; log_length = length($1); app_code_length = length($2); log_path = substr($1, 2, log_length - 2); app_code = substr($2, 2, app_code_length - 2); map[log_path] = app_code&#125; END &#123; for (key in map) &#123; printf (\"%10s=%10s \", key, map[key]) &#125;&#125;'`) 以上逻辑, 由 sed 与 awk 两重管道输出目标内容, 作为创建数组的参数, 以达到动态创建的目的;但是, 以上方式只适用于创建 数组, 而不适用于创建 关联数组, 原因与上一节 静态创建数组 中所表述的相同: 即使输出格式符合定义规范, bash 并不会自动推断为 关联数组;&nbsp;另外, 企图通过 declare 强制限定类型去动态创建, 也是不合法的:1234&gt; declare -A map=(`last -n 1 | head -n 1 | awk '&#123;map[$1]=$3&#125; END&#123;for (key in map) &#123;printf (\"[%10s]=%10s \", key, map[key])&#125;&#125;'`)# 以上语句会报如下错误:-bash: map: [: must use subscript when assigning associative array-bash: map: zshell.z]=113.44.125.146: must use subscript when assigning associative array 因为, 通过 ``, $() 等命令代换, [zshell.z]=113.44.125.146 这样的输出内容被当作命令执行, 而 [ 这是一个 bash 的内置命令, 用于条件判断;显然 zshell.z]=113.44.125.146 这样的语句是不符合条件判断的参数输入的; 数组/关联数组 的使用单独赋值:12map['a']='aaa'array[0]=aaa 获取数据:12345678910111213# 获得所有 valuesecho $&#123;map[@]&#125;echo $&#123;array[@]&#125;# 获得某个单独的值var=$&#123;map['a']&#125;var=$&#123;array[0]&#125;# 获得所有 keys (对于数组而言, 就是获得所有的索引下标)for key in $&#123;!map[@]&#125;; do ...donefor key in $&#123;!array[@]&#125;; do ...done 参考链接 shell中的map使用","categories":[{"name":"linux","slug":"linux","permalink":"https://zshell-zhang.github.io/categories/linux/"},{"name":"shell","slug":"linux/shell","permalink":"https://zshell-zhang.github.io/categories/linux/shell/"}],"tags":[{"name":"linux:shell","slug":"linux-shell","permalink":"https://zshell-zhang.github.io/tags/linux-shell/"}]},{"title":"rsyncd 配置与运维","slug":"rsync--rsyncd配置与运行","date":"2017-10-14T15:20:21.000Z","updated":"2018-01-20T16:15:53.256Z","comments":true,"path":"2017/10/14/rsync--rsyncd配置与运行/","link":"","permalink":"https://zshell-zhang.github.io/2017/10/14/rsync--rsyncd配置与运行/","excerpt":"本文主要梳理 rsync server 的基本配置与使用方式;","text":"本文主要梳理 rsync server 的基本配置与使用方式; rsync server 的几个关键配置文件 /etc/rsyncd.conf: 主配置文件; /etc/rsyncd.password/rsyncd.secrets: 秘钥文件; /etc/rsyncd.motd: rysnc 服务器元信息, 非必须; 其中, rsyncd.password 秘钥文件的掩码必须是 600:123&gt; ll /etc/ | grep rsyncd-rw-r--r-- 1 root root 361 Apr 6 2017 rsyncd.conf-rw------- 1 root root 24 Apr 6 2017 rsyncd.password rsyncd.conf 配置说明一个典型的 rsyncd.conf 文件如下:123456789101112131415161718192021222324252627282930# rsyncd 守护进程运行系统用户全局配置, 可在具体的块中配置uid=nobodygid=nobody# 是否需要 chroot, 若为 yes, 当客户端连接某模块时, 首先 chroot 到 模块的 path 目录下user chroot = nomax connections = 200timeout = 600pid file = /data1/trans_file/rsyncd.pidlock file = /data1/trans_file/rsyncd.locklog file = /data1/trans_file/rsyncd.log# 用户秘钥文件, 可在具体的模块中配置secrets file = /etc/rsyncd.password# 服务器元信息, 非必选# motd file = /etc/rsyncd/rsyncd.motd# 指定不需要压缩就可以直接传输的文件类型dont compress = *.gz *.tgz *.zip *.z *.Z *.rpm *.deb *.bz2# 模块配置[wireless_log]# 模块使用的 user, 此模块将使用 rsyncd.password 文件中 sync 用户对应的秘钥进行文件传输auth users = syncpath = /data1/trans_file/files/wireless_logignore errors# 是否只读read only = no# 是否允许列出模块里的内容list = no rsyncd.password / rsyncd.secrets 配置说明以 : 分隔, 用户名和密码, 每行一个:12user1:password1user2:password2 rsyncd 启动方式12# 当负载高时, 以守护进程的方式运行 rsyncdsudo /usr/bin/rsync --daemon --config=/etc/rsyncd.conf 参考链接 centos下配置rsyncd服务器 RSync实现文件备份同步","categories":[{"name":"rsync","slug":"rsync","permalink":"https://zshell-zhang.github.io/categories/rsync/"}],"tags":[{"name":"rsync","slug":"rsync","permalink":"https://zshell-zhang.github.io/tags/rsync/"}]},{"title":"du / df 使用及其区别","slug":"linux-other--du,df使用及其区别","date":"2017-04-07T14:58:04.000Z","updated":"2018-01-20T16:16:58.748Z","comments":true,"path":"2017/04/07/linux-other--du,df使用及其区别/","link":"","permalink":"https://zshell-zhang.github.io/2017/04/07/linux-other--du,df使用及其区别/","excerpt":"本文主要是整理 磁盘使用量 相关的命令, 如 du, df 等;接着, 一般性得总结这两个命令在实际工作中的应用;然后再以 du, df 命令的区别为例, 讨论命令背后的逻辑, 工作中存在的问题, 最后引申出问题解决的工具: lsof;","text":"本文主要是整理 磁盘使用量 相关的命令, 如 du, df 等;接着, 一般性得总结这两个命令在实际工作中的应用;然后再以 du, df 命令的区别为例, 讨论命令背后的逻辑, 工作中存在的问题, 最后引申出问题解决的工具: lsof; du命令 estimate disk file space usage. — man du du 的常用选项123456789101112# 不加任何选项, 默认是 列举指定路径下, 每一个目录(递归所有的子目录)的大小sudo du /target_path# 列举指定路径下所有的文件(包括目录与文件)的大小sudo du -a /target_path# 以 human-readable 的形式, 列举目标路径的文件磁盘占用总大小(将该路径下所有子文件大小求和)sudo du -s /target_path# 以指定路径下所有的子一级路径为 target, 以 human-readable 的方式列举其中每一个下的所有子文件大小之和# (诊断 磁盘满问题 最常用的方式)sudo du -sh /target_path/*# 除了其余选项该有的输出之外, 最后一行另附一个给定 target_path 下的 total 总和# 理论上这与目标路径不含通配符的 -sh 输出结果是相同的sudo du -c /target_path df 命令 file system disk space usage. — man df df 的常用选项123456789101112# 显示给定的路径所挂载的磁盘分区的大小及使用量等df /target_path# 以 MB 最小单位显示大小及使用量df --block-size=1m /target_pathdf -B 1m /target_path# 以 human-readable 的方式显示 当前挂载的所有可用健康的文件系统 的大小, 使用量等情况df -h # 1024df -H # 1000# 显示所有的文件系统, 包括 伪文件系统, 重复的, 不可访问的文件系统 (pseudo, duplicate, inaccessible)df -a# 过滤 nfs 远程文件系统后的本地文件系统df -l &nbsp;一般性总结:df 命令主要关心的是磁盘分区的 size, 而不是具体某文件的占用大小;所以 df 命令的主要运用场景是: df -h, 判断所挂载的每个分区的使用率, 是不是满了;作为先决判断依据, 如果发现磁盘满了, 再接着使用 du -sh 等命令进一步排查;&nbsp; du 与 df 命令的区别df 命令与 du 命令的工作原理df 命令使用 系统调用 statfs, 获取磁盘分区的超级块 (super block) 使用情况;du 命令使用 系统调用 fstat, 获取待统计文件的大小; df 命令与 du 命令可接受范围内不一致[问题场景]: du -s 与 df 核算精确结果总有差异;&nbsp;[原因]: du -s 命令通过将指定文件系统中所有的目录, 符号链接和文件使用的块数累加得到该文件系统使用的总块数, 这是上层用户级的数据;df 命令通过查看文件系统磁盘块分配图得出总块数与剩余块数, 这是直接从底层获取的数据;所以, 一些元数据信息(inode, super blocks 等)不会被上层的 du 命令计入在内, 而 df 命令由于直接获取的底层超级块的信息, 则会将其计入在内;&nbsp;[结论]: 这种差异属于系统性的差异, 是由命令的特点决定的, 无法改变; df 命令与 du 命令显著不一致[问题场景]: 当一个被某进程持有其句柄的文件被删除后, 进程不释放句柄, du 将不会再统计该文件, 而 df 的使用量仍会将其计入在内;&nbsp;[原因]: 当文件句柄被进程持有, 尽管文件被删除, 目录项已经不存在该文件路径了, 但只要句柄不释放, 文件在磁盘上就不会真正删除该文件;这样一来, 目录项不存在该文件了, du 命令就不会统计到该文件, 但文件没真正删除, 磁盘分区 super block 的信息就不会改变, df 命令仍会将其计入使用量;&nbsp;[结论]: 这种差异属于第三方因素干扰导致的差异, 且差异十分显著, 需要通过下一节所讨论的方式加以解决; 问题解决方案磁盘满了, 但是有进程持有大文件的句柄, 无法真正从磁盘删除掉; 对于这类问题, 有如下两种解决方案:1.配合使用 lsof 找出相关的 幽灵文件 的句柄持有情况(command 与 pid):1234&gt; sudo lsof | grep deletednginx 4804 nobody 59u REG 253,1 110116 243425480 /usr/local/openresty/nginx/client_body_temp/0068359496 (deleted)nginx 4819 nobody 51u REG 253,1 115876 243425480 /usr/local/openresty/nginx/client_body_temp/0068359498 (deleted)... 然后 kill 掉进程 (或 restart 进程), 即可释放文件句柄;当然, 本文是以 nginx 举例, 但实际上 nginx 对于日志文件的文件句柄释放, 有自己专有的方法, 具体内容请见本站另外两篇文章: linux signals 总体认识#其他信号 和 nginx signals 处理;另外, 磁盘满的问题, 不能总是靠人肉登机器去解决, 我们需要一些自动化的方案来将我们从这种低级的操作中解放出来;所以, 对于所有机器上都会遇到的日志文件不断累积占满磁盘的问题, 这篇文章介绍了解决方案: logrotate 配置与运维;&nbsp;2.如果进程很重要, 不能容忍任何时间范围内的服务不可用 (其实理论上这种情况属于单点瓶颈, 未能做到高可用), 则可以采用如下方式:12# 将文件写空sudo echo &gt; file_path 将文件内容间接删除, 这样即便句柄未释放, 但文件本身已经没有内容, 也就不再占用空间了; 站内相关文章 logrotate 配置与运维 linux signals 总体认识#其他信号 nginx signals 处理 参考链接 df和du显示的磁盘空间使用情况不一致的原因及处理 linux lsof 详解","categories":[{"name":"linux","slug":"linux","permalink":"https://zshell-zhang.github.io/categories/linux/"},{"name":"other","slug":"linux/other","permalink":"https://zshell-zhang.github.io/categories/linux/other/"}],"tags":[{"name":"linux:disk","slug":"linux-disk","permalink":"https://zshell-zhang.github.io/tags/linux-disk/"}]},{"title":"linux signals 总体认识","slug":"linux-process--linux_signals总体认识","date":"2017-04-05T15:24:22.000Z","updated":"2018-01-20T12:10:14.216Z","comments":true,"path":"2017/04/05/linux-process--linux_signals总体认识/","link":"","permalink":"https://zshell-zhang.github.io/2017/04/05/linux-process--linux_signals总体认识/","excerpt":"linux 的信号系统其实是一个非常重要的概念, 进程间通信的常用方法之一;不过长期以来, 我们对 linux 信号的直观认识, 只有 kill (SIGTERM), ctrl + c (SIGINT) 和 kill -9 等进程终止信号; 而 linux 的信号系统中存在 64 种各司其职的信号, 适用于各种各样的场景; 很多信号在实际工作中有着妙用;本文正是想对 linux 世界中林林总总的 signals 作一次梳理, 总结一些日常工作中频繁使用以及不太接触但十分有用的信号;","text":"linux 的信号系统其实是一个非常重要的概念, 进程间通信的常用方法之一;不过长期以来, 我们对 linux 信号的直观认识, 只有 kill (SIGTERM), ctrl + c (SIGINT) 和 kill -9 等进程终止信号; 而 linux 的信号系统中存在 64 种各司其职的信号, 适用于各种各样的场景; 很多信号在实际工作中有着妙用;本文正是想对 linux 世界中林林总总的 signals 作一次梳理, 总结一些日常工作中频繁使用以及不太接触但十分有用的信号; linux signals 总览linux siginal 可分为如下几大类: 系统错误信号 进程终止信号 作业控制信号 AIO 信号 定时器信号 操作错误信号 其他信号 &nbsp;linux signals 的产生源一般分为三类: 硬件方式(除数为 0, 内存非法访问等), IO 方式(键盘事件), 以及软件方式: kill 命令, alarm 定时器等;其中我们最熟悉的莫不过 kill 命令了, 详情请见: kill 命令族及其选项; &nbsp;使用 kill -l 查看所有信号分布:1234567891011121314&gt; kill -l 1) SIGHUP 2) SIGINT 3) SIGQUIT 4) SIGILL 5) SIGTRAP 6) SIGABRT 7) SIGBUS 8) SIGFPE 9) SIGKILL 10) SIGUSR111) SIGSEGV 12) SIGUSR2 13) SIGPIPE 14) SIGALRM 15) SIGTERM16) SIGSTKFLT 17) SIGCHLD 18) SIGCONT 19) SIGSTOP 20) SIGTSTP21) SIGTTIN 22) SIGTTOU 23) SIGURG 24) SIGXCPU 25) SIGXFSZ26) SIGVTALRM 27) SIGPROF 28) SIGWINCH 29) SIGIO 30) SIGPWR31) SIGSYS 34) SIGRTMIN 35) SIGRTMIN+1 36) SIGRTMIN+2 37) SIGRTMIN+338) SIGRTMIN+4 39) SIGRTMIN+5 40) SIGRTMIN+6 41) SIGRTMIN+7 42) SIGRTMIN+843) SIGRTMIN+9 44) SIGRTMIN+10 45) SIGRTMIN+11 46) SIGRTMIN+12 47) SIGRTMIN+1348) SIGRTMIN+14 49) SIGRTMIN+15 50) SIGRTMAX-14 51) SIGRTMAX-13 52) SIGRTMAX-1253) SIGRTMAX-11 54) SIGRTMAX-10 55) SIGRTMAX-9 56) SIGRTMAX-8 57) SIGRTMAX-758) SIGRTMAX-6 59) SIGRTMAX-5 60) SIGRTMAX-4 61) SIGRTMAX-3 62) SIGRTMAX-263) SIGRTMAX-1 64) SIGRTMAX 各类别信号整理进程终止信号进程终止信号是我们日常操作中最常用的一类信号;进程终止信号共有五个, 其中除了 SIGKILL 之外, 其他信号都是 可阻塞, 可忽略, 可处理的;12345678910111213# terminate, kill 不加任何选项的默认信号, 默认处理是终止进程;SIGTERM# interrupt, ctrl + c 发出的信号, 默认处理是终止进程;SIGINT# quit, ctrl + / 发出的信号, 与 SIGINT 类似, 不过其默认处理相比 SIGINT 还增加了一项:# 1. 终止进程; 2. 产生进程 core dump 文件;SIGQUIT# kill, 不可阻塞, 不可忽略, 最强力的终止信号, 通常会导致进程立即终止, 其占有的资源无法释放清理# 一般需要在 SIGTERM/SIGINT/SIGQUIT 等信号无法响应之后, 才最后使用SIGKILL# hang up, 通常在用户退出终端断开 sessiion 时由系统发出该信号给 session# session 接收该信号并将其发送给子进程SIGHUP 另外一篇详细梳理与 SIGHUP 相关知识点的链接: SIGHUP 相关全梳理;该文章主要涉及 SIGHUP 信号发生的条件, 传导, 与 SIGHUP 相关的 nohup, &amp;, shopt huponexit, disown 等概念, 并包括一些 SIGHUP 的自定义应用; 任务控制信号其他信号其他信号是指未在上述分类中的一些小众信号, 这些信号本身并未有太多关联, 不能用一个类别去统一描述它们;&nbsp;(1) 用户自定义信号: SIGUSR1 / SIGUSR2这两个信号, linux 保证系统自身不会向进程发送, 完全由使用者自己定义该信号的语义以及处理逻辑;SIGUSR1 与 SIGUSR2, 在系统层面完全没有区别, 如果可以, linux 其实能再定义一个 SIGUSR3; 所以用户自定义信号的预留数量, 本身是一个模糊的界定;以下是 SIGUSR1 / SIGUSR2 的具体使用场景:1234# 通知 nginx 关闭当前句柄, 重新打开日志文件, 用于 logrotate 切割日志kill -USR1 `cat /var/run/nginx.pid`# 通知 nginx 平滑升级 二进制可执行程序kill -s SIGUSR2 `cat /var/run/nginx.pid` &nbsp;(2) SIGWINCH (winch 译作: 吊车, 摇柄), 默认处理是忽略该信号;以下是 SIGWINCH 的具体使用场景:12# 通知 nginx worker process 不再接受新 request, 并从容关闭kill -WINCH `cat /var/run/nginx.pid` 当然, 通知 worker process 不再接受新请求, nginx 并不需要使用者直接在 linux signals 层面直接处理, nginx 本身提供了平滑重启命令 sbin/nginx -c conf/nginx.conf -s reload, SIGWINCH 信号的发送封装在了该命令里;&nbsp;关于 nginx 与 linux signals 的关系, 在本站另一篇文章中有详细介绍: nginx signals 处理; 站内相关文章 kill 命令族及其选项 SIGHUP 相关全梳理 nginx signals 处理 参考链接 24.2.2 Termination Signals 24.2.5 Job Control Signals 24.2.7 Miscellaneous Signals Difference between SIGUSR1 and SIGUSR2 linux kill 命令 以及 USR1 信号 解释 Linux 信号入门详解 文章3: Nginx中与信号有关的内容","categories":[{"name":"linux","slug":"linux","permalink":"https://zshell-zhang.github.io/categories/linux/"},{"name":"process","slug":"linux/process","permalink":"https://zshell-zhang.github.io/categories/linux/process/"}],"tags":[{"name":"linux:process","slug":"linux-process","permalink":"https://zshell-zhang.github.io/tags/linux-process/"}]},{"title":"lsof 札记","slug":"linux-other--lsof札记","date":"2017-01-06T07:17:04.000Z","updated":"2018-01-20T13:26:42.069Z","comments":true,"path":"2017/01/06/linux-other--lsof札记/","link":"","permalink":"https://zshell-zhang.github.io/2017/01/06/linux-other--lsof札记/","excerpt":"第一次接触到 lsof 命令, 是因为偶然间发现 netstat 命令已经落伍了(与此同时, 还发现了 ss 命令, 详见另一篇文章: netstat/ss 使用对比 );使用之后, 发现 lsof 被人称为 神器, 还是有一定道理的; 在任何资源都被抽象为 文件 的 linux 中, 一个面向 文件 的管理工具, 自然辖域辽阔, 神通广大, 再加上与其他命令的巧妙组合, 更如虎添翼, 在工作实践中独当一面;本文参考了一些实用资料, 结合自己的经验, 对 lsof 命令的使用略作整理;","text":"第一次接触到 lsof 命令, 是因为偶然间发现 netstat 命令已经落伍了(与此同时, 还发现了 ss 命令, 详见另一篇文章: netstat/ss 使用对比 );使用之后, 发现 lsof 被人称为 神器, 还是有一定道理的; 在任何资源都被抽象为 文件 的 linux 中, 一个面向 文件 的管理工具, 自然辖域辽阔, 神通广大, 再加上与其他命令的巧妙组合, 更如虎添翼, 在工作实践中独当一面;本文参考了一些实用资料, 结合自己的经验, 对 lsof 命令的使用略作整理; lsof 命令的输出结构12345678910111213# COMMAND 启动进程的命令# PID 进程号# TID 线程号# USER 用户# FD 文件描述符# TYPE 文件类型# DEVICE 磁盘名称# SIZE 文件大小# NODE inode 号# NAME 文件资源的名称&gt; sudo lsof | head -n 2COMMAND PID TID USER FD TYPE DEVICE SIZE/OFF NODE NAMEsystemd 1 root cwd DIR 253,1 4096 128 / 各字段的不同输出含义FD: 文件描述符 file description12345678910111213141516# 任何进程都必须有的0: 标准输入流1: 标准输出流2: 标准错误流# 几种特殊的保留 fdcwd: current work directory, 应用程序启动的目录txt: 二进制可执行文件或共享库rtd: root directory, 根目录mem: memory mapped file, 内存映射文件mmap: memory-mapped device, 内存映射设备# 整数后面跟着的字母u: 可读可写模式r: 只读模式w: 只写模式 TYPE: 文件类型123456DIR: 目录文件REG: 普通文件CHR: char, 字符设备文件BLK: block, 块设备文件IPV4: ipv4 socket 套接字文件IPV6: ipv6 socket 套接字文件 DEVICE:1todo SIZE: 文件大小12# 套接字文件的文件大小比较特殊, 其没有大小, 用特殊字符占位, 其余则正常显示 size0t0: 套接字文件的默认占位 &nbsp; lsof 的日常应用lsof 网络 相关的应用12345678910# 显示所有网络连接sudo lsof -i# 只显示 ipv6 的连接sudo lsof -i 6# 只显示 tcp 协议的连接sudo lsof -i TCP# 指定端口号sudo lsof -i:port# 指定主机(与端口)sudo lsof -i@l-tracer15.tc.cn2.xx.com:9999 lsof 用户 相关的应用123# 显示某用户所打开的文件sudo lsof -u zshell.zhangsudo lsof -u ^zshell.zhang (排除此用户) lsof 命令/进程 相关的应用123456# 只显示 pidsudo lsof -t# 只显示指定的命令打开的文件sudo lsof -c nginx# 只显示指定 pid 的进程打开的文件sudo lsof -p pid lsof 文件/目录 相关的应用12345# 搜索与指定路径相关的一切资源(user, process 等)sudo lsof /target_path# +d: 搜索与指定的一级目录下所有的文件相关的一切资源; +D: 递归操作(往下所有层级目录)sudo lsof +d /target_pathsudo lsof +D /target_path lsof 的选项组合及实践技巧上述的 lsof 操作, 对于多种选项的组合, 其默认是 或(or) 的关系, 即满足其中之一便会打印出来;lsof 与(and) 的逻辑运算关系如下:123456# 使用 -a 达到 与(and) 的效果# 必须同时满足三个条件: # 1. 是用户 zshell.zhang 启动的进程;# 2. 是套接字文件, 且连接的主机是 10.64.4.11;# 3. 该进程命令是 java;sudo lsof -a -u zshell.zhang -i@10.64.4.11 -c java lsof 常用的组合及实践:12345678910# 寻找已删除但未释放文件句柄的幽灵文件sudo lsof | grep deleted# 杀死所有匹配一定文件打开条件的进程sudo kill `sudo lsof -t -c java` # 杀死所有 java 进程sudo kill `sudo lsof -t -u zshell.zhang` # 杀死所有 zshell.zhang 的用户进程# 恢复删除的文件# 找到误删文件被什么进程持有, 获得 pid 和 fd1. sudo lsof /target_deleted_file# /proc/&#123;pid&#125;/fd/&#123;fd_num&#125; 的内容即为误删内容, 重定向到误删文件中即可2. cat /proc/&#123;pid&#125;/fd/&#123;fd_num&#125; &gt; /target_deleted_file 另外, lsof 还可以被运用于找出系统中的幽灵文件, 详见: du / df 使用及其区别; 站内相关文章 netstat/ss 使用对比 du / df 使用及其区别 参考链接 linux lsof详解 每天一个Linux命令（45）lsof命令 Linux 命令神器: lsof 入门 what-does-the-fd-column-of-pipes-listed-by-lsof-mean","categories":[{"name":"linux","slug":"linux","permalink":"https://zshell-zhang.github.io/categories/linux/"},{"name":"other","slug":"linux/other","permalink":"https://zshell-zhang.github.io/categories/linux/other/"}],"tags":[{"name":"linux:disk","slug":"linux-disk","permalink":"https://zshell-zhang.github.io/tags/linux-disk/"},{"name":"linux:net","slug":"linux-net","permalink":"https://zshell-zhang.github.io/tags/linux-net/"}]},{"title":"maven-assembly-plugin 使用总结","slug":"tools-maven--assembly_plugin","date":"2016-11-19T15:42:40.000Z","updated":"2018-01-20T13:20:30.547Z","comments":true,"path":"2016/11/19/tools-maven--assembly_plugin/","link":"","permalink":"https://zshell-zhang.github.io/2016/11/19/tools-maven--assembly_plugin/","excerpt":"本文在 Apache Maven 的官方文档上, 结合自己的一些项目经历: 在 Apache Spark 中使用 springframework 的一次实践, 总结了一些 assembly 插件的使用方式和一些注意事项, 以作备忘;另外, 由于 assembly 的 核心配置文件中可配置项种类繁多, 为了体现直观性, 文本直接在一段 ‘丰富而典型’ 的配置文件 case 上, 以注释的形式作为每个配置项的释义;","text":"本文在 Apache Maven 的官方文档上, 结合自己的一些项目经历: 在 Apache Spark 中使用 springframework 的一次实践, 总结了一些 assembly 插件的使用方式和一些注意事项, 以作备忘;另外, 由于 assembly 的 核心配置文件中可配置项种类繁多, 为了体现直观性, 文本直接在一段 ‘丰富而典型’ 的配置文件 case 上, 以注释的形式作为每个配置项的释义; pom.xml 中的配置项一段典型的 assembly 插件的 mvn 配置:123456789101112131415161718192021222324252627&lt;plugin&gt; &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt; &lt;version&gt;$&#123;assembly.plugin.version&#125;&lt;/version&gt; &lt;configuration&gt; &lt;!-- 打包后的包名是否需要追加 assembly 配置文件的 id --&gt; &lt;appendAssemblyId&gt;false&lt;/appendAssemblyId&gt; &lt;!-- 最终生成的打包文件输出的路径 --&gt; &lt;outputDirectory&gt;$&#123;project.build.directory&#125;/target&lt;/outputDirectory&gt; &lt;!-- 定义核心配置文件的访问路径 --&gt; &lt;descriptors&gt; &lt;descriptor&gt;$&#123;basedir&#125;/src/main/assembly/client.xml&lt;/descriptor&gt; &lt;descriptor&gt;$&#123;basedir&#125;/src/main/assembly/server.xml&lt;/descriptor&gt; &lt;/descriptors&gt; &lt;/configuration&gt; &lt;executions&gt; &lt;execution&gt; &lt;!-- 一般运行在 package phase --&gt; &lt;phase&gt;package&lt;/phase&gt; &lt;goals&gt; &lt;!-- assembly 插件中唯一的核心 goal, 另外一个 goal 是 assembly:help --&gt; &lt;goal&gt;single&lt;/goal&gt; &lt;/goals&gt; &lt;/execution&gt; &lt;/executions&gt;&lt;/plugin&gt; &nbsp; 核心配置文件以下 assembly 核心配置文件包含了最常用的几种配置项, 该文件习惯上放置在 ${basedir}/src/main/assembly/ 目录里, 并如上一节所示, 在 configuration -&gt; descriptors 路径下定义加载:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081&lt;assembly xmlns=\"http://maven.apache.org/ASSEMBLY/2.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/ASSEMBLY/2.0.0 http://maven.apache.org/xsd/assembly-2.0.0.xsd\"&gt; &lt;!-- assembly 配置文件id --&gt; &lt;id&gt;deploy&lt;/id&gt; &lt;!-- 目标打包文件的格式, 支持格式如下: jar, war, zip, tar, tar.gz, tar.bz2 等 --&gt; &lt;formats&gt; &lt;format&gt;jar&lt;/format&gt; &lt;/formats&gt; &lt;!-- 是否以 $&#123;project.build.finalName&#125;, 作为所有被打包文件的基目录, 默认 true --&gt; &lt;includeBaseDirectory&gt;false&lt;/includeBaseDirectory&gt; &lt;!-- 显式定义 所有被打包文件的基目录 --&gt; &lt;baseDirectory&gt;$&#123;project.build.finalName&#125;&lt;/baseDirectory&gt; &lt;!-- 独立文件的收集 --&gt; &lt;files&gt; &lt;file&gt; &lt;!-- 待收集的文件名 --&gt; &lt;source&gt;LICENSE.txt&lt;/source&gt; &lt;!-- 收集到目标文件的相对路径 --&gt; &lt;outputDirectory&gt;/&lt;/outputDirectory&gt; &lt;/file&gt; &lt;file&gt; &lt;source&gt;NOTICE.txt&lt;/source&gt; &lt;outputDirectory&gt;/&lt;/outputDirectory&gt; &lt;!-- 将 $&#123;...&#125; 占位符 替换为实际的内容, 默认 false --&gt; &lt;filtered&gt;true&lt;/filtered&gt; &lt;/file&gt; &lt;/files&gt; &lt;!-- 目录的收集 --&gt; &lt;fileSets&gt; &lt;fileSet&gt; &lt;!-- 目录名 --&gt; &lt;directory&gt;$&#123;project.basedir&#125;/src/main/resources&lt;/directory&gt; &lt;outputDirectory&gt;/&lt;/outputDirectory&gt; &lt;/fileSet&gt; &lt;fileSet&gt; &lt;directory&gt;$&#123;project.basedir&#125;/src/doc&lt;/directory&gt; &lt;!-- 是否使用默认的排除项, 排除范围包括版本控制程序产生的 metadata 等, 默认 true --&gt; &lt;useDefaultExcludes&gt;true&lt;/useDefaultExcludes&gt; &lt;outputDirectory&gt;/doc&lt;/outputDirectory&gt; &lt;/fileSet&gt; &lt;/fileSets&gt; &lt;!-- 依赖的收集 --&gt; &lt;dependencySets&gt; &lt;dependencySet&gt; &lt;outputDirectory&gt;/lib&lt;/outputDirectory&gt; &lt;!-- 是否将本次构建过程中生成的 主构件 加入到依赖的收集中, 默认 true --&gt; &lt;useProjectArtifact&gt;true&lt;/useProjectArtifact&gt; &lt;!-- 是否将本次构建过程中生成的 附加构件 也加入到依赖的收集中, 默认 false --&gt; &lt;useProjectAttachments&gt;false&lt;/useProjectAttachments&gt; &lt;!-- 是否将依赖都解包为普通的目录文件放入 outputDirectory, 默认 false --&gt; &lt;unpack&gt;false&lt;/unpack&gt; &lt;!-- --&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;!-- 是否让该 dependencySets 收集具有传递性, 即递归地将 dependency 间接依赖的 dependencies 都收集到打包文件中, 默认 true --&gt; &lt;useTransitiveDependencies&gt;true&lt;/useTransitiveDependencies&gt; &lt;!-- includes/excludes 的格式: groupId:artifactId:type:classifier groupId:artifactId groupId:artifactId:type:classifier:version 支持使用 * 通配, * 可以完整匹配由多个 ':' 分割的 section; --&gt; &lt;excludes&gt; &lt;exclude&gt;org.apache.commons:commons-logging:jar&lt;/exclude&gt; &lt;exclude&gt;*:war&lt;/exclude&gt; &lt;/excludes&gt; &lt;!-- 是否让 includes/excludes 具有传递性, 即递归地让指定的 dependency 间接依赖的 dependencies 都被 include/exclude, 默认 false --&gt; &lt;useTransitiveFiltering&gt;true&lt;/useTransitiveFiltering&gt; &lt;/dependencySet&gt; &lt;/dependencySets&gt; &lt;/assembly&gt; &nbsp; 使用 assembly 的一些注意事项 使用 assembly 打包成需要独立运行的 jar 时, 若无特殊需要显式定义 CLASSPATH, 则在核心配置文件中不应该定义 baseDirectory, 并将 includeBaseDirectory 置为 false;因为 assembly 生成的 jar 包在 /META-INF/MANIFEST.MF 文件中默认不会定义 Class-Path, 即 CLASSPATH 默认就是 jar 中的基目录; 1234# assembly 生成的 /META-INF/MANIFEST.MFManifest-Version: 1.0Archiver-Version: Plexus ArchiverCreated-By: 25.151-b12 (Oracle Corporation) 核心配置文件中的 outputDirectory 皆是以目标打包文件的根为相对路径的; 无论是否在路径最前面添加 /, 都不会有影响; assembly 2.2 之前的版本, 在涉及到一些复杂第三方依赖, 多个不同的 jar 包中含有同名的文件 (如 org.springframework) 时, 使用 assembly 打包时会遇到一个 bug:assembly 只把第一次遇到的同名文件加入目标打包文件, 其后遇到的同名文件, 则被 skip 掉 ( 详见官方 issue: When using mulitple Spring dependencies, the files from META-INF (from the Spring jars) overwrite each other in an executable jar-with-dependencies );当然, 在这个 issue 当中, 触发此 bug 还有一个必要条件是将 dependencySet 中的 unpack 置为 true, 这样多个 spring artifact META-INF/ 中的 spring.handlers / spring.schemas / spring.tooling 等文件才会同名冲突; &nbsp; 关于 assembly 命令除了上述以 配置文件 + maven core phase 回调的形式使用 assembly 插件之外, assembly 插件的 goals 也可以命令的形式执行:12mvn clean assembly:singlemvn assembly:help 由于使用 assembly 命令的场景不多见, 此处不再详述, 详见 maven 官方介绍: assembly:single &nbsp; 站内相关文章 在 Apache Spark 中使用 springframework 的一次实践 &nbsp; 参考链接 Apache Maven Assembly Plugin: Assembly Filtering Some Distribution Files 8.5. Controlling the Contents of an Assembly Quick Note on All includes and excludes Patterns","categories":[{"name":"tools","slug":"tools","permalink":"https://zshell-zhang.github.io/categories/tools/"},{"name":"maven","slug":"tools/maven","permalink":"https://zshell-zhang.github.io/categories/tools/maven/"}],"tags":[{"name":"mvn:plugins","slug":"mvn-plugins","permalink":"https://zshell-zhang.github.io/tags/mvn-plugins/"}]},{"title":"cli 控制字符","slug":"linux-other--cli控制字符","date":"2016-11-17T13:11:33.000Z","updated":"2018-01-07T13:13:21.679Z","comments":true,"path":"2016/11/17/linux-other--cli控制字符/","link":"","permalink":"https://zshell-zhang.github.io/2016/11/17/linux-other--cli控制字符/","excerpt":"cli 控制字符是终端操作中非常实用, 也极其频繁使用的快捷键; 使用得好可以加快敲命令的速度, 提升敲命令的准确性, 为工作带来极大便利; 同时, 这也是我们对 linux 爱不释手, 难以回到 windows 的原因之一;另外, 很多 cli 控制字符本质上是向 linux 或进程发送特定的信号, 关于 linux 信号的介绍, 本站有另外一篇文章: linux signals 总体认识;本文总结一些常用的 cli 控制字符的使用及技巧;","text":"cli 控制字符是终端操作中非常实用, 也极其频繁使用的快捷键; 使用得好可以加快敲命令的速度, 提升敲命令的准确性, 为工作带来极大便利; 同时, 这也是我们对 linux 爱不释手, 难以回到 windows 的原因之一;另外, 很多 cli 控制字符本质上是向 linux 或进程发送特定的信号, 关于 linux 信号的介绍, 本站有另外一篇文章: linux signals 总体认识;本文总结一些常用的 cli 控制字符的使用及技巧; 简单的 cli 控制字符123456789101112131415161718192021222324# 发送 SIGINT 中断信号ctrl + c# 清屏ctrl + l# reverse-i-search 搜索历史命令ctrl + r# 从机器上 logoutctrl + d# 暂停控制台标准输出 / 恢复控制台标准输出ctrl + s / ctrl + q# 发送 SIGQUIT 信号给前台进程, 并生成 core dumpctrl + /# 向前删除到第一个空格ctrl + w# 向后删除到第一个空格 alt + d# 向后删除所有的内容ctrl + k# 撤销上一步操作ctrl + ?# 光标快速跃进ctrl + 方向键# 补全命令/文件tab 与其他命令组合的 cli 控制字符 1234# 发送 SIGTSTP 信号, 挂起前台进程ctrl + z# ctrl + z 的输出[1]+ Stopped sudo vim /etc/profile 此时该前台进程被挂起, 操作系统将不会调度任何 cpu time 给此进程;接下来可以有以下配套操作:123456789101112# 查看后台任务&gt; jobs[1]+ Stopped sudo vim /etc/profile# 查看后台任务的 pidjobs -p# 将后台作业 1 恢复到前台fg 1fg %1# 将后台作业 1 恢复到后台bg 1bg %1 要杀死被挂起的后台任务有一些麻烦, 因为该任务处于 suspend 状态, 无法主动响应 SIGTERM, SIGINT 等相对柔和的信号, 但可以被 SIGKILL 这种强力的信号直接杀死:12kill -9 %1kill -9 `jobs -p` 还有一种比较讨巧的方法是结合 fg/bg 等唤醒后台任务的命令:12345# 当任务被唤醒, 将接收到 SIGTERM 信号并终止kill %1 &amp;&amp; fgkill %1 &amp;&amp; bgkill `jobs -p` &amp;&amp; bgkill `jobs -p` &amp;&amp; fg 控制字符的管理与设置12345678# 打印所有控制字符的设置 (--all)&gt; stty -aspeed 38400 baud; rows 60; columns 211; line = 0;intr = ^C; quit = ^\\; erase = ^?; kill = ^U; eof = ^D; eol = &lt;undef&gt;; eol2 = &lt;undef&gt;; swtch = &lt;undef&gt;; start = ^Q; stop = ^S; susp = ^Z; rprnt = ^R; werase = ^W; lnext = ^V; flush = ^O; min = 1; time = 0;-parenb -parodd cs8 -hupcl -cstopb cread -clocal -crtscts -cdtrdsr-ignbrk -brkint -ignpar -parmrk -inpck -istrip -inlcr -igncr icrnl ixon -ixoff -iuclc -ixany -imaxbel -iutf8opost -olcuc -ocrnl onlcr -onocr -onlret -ofill -ofdel nl0 cr0 tab0 bs0 vt0 ff0isig icanon iexten echo echoe echok -echonl -noflsh -xcase -tostop -echoprt echoctl echoke 参考链接 Bg, Fg, &amp;, Ctrl-Z – 5 Examples to Manage Unix Background Jobs Linux中 ctrl-c, ctrl-z, ctrl-d 区别","categories":[{"name":"linux","slug":"linux","permalink":"https://zshell-zhang.github.io/categories/linux/"},{"name":"other","slug":"linux/other","permalink":"https://zshell-zhang.github.io/categories/linux/other/"}],"tags":[{"name":"cheat sheet","slug":"cheat-sheet","permalink":"https://zshell-zhang.github.io/tags/cheat-sheet/"}]},{"title":"sed 命令整理","slug":"linux-text-sed命令整理","date":"2016-11-04T14:56:47.000Z","updated":"2018-01-04T14:58:47.480Z","comments":true,"path":"2016/11/04/linux-text-sed命令整理/","link":"","permalink":"https://zshell-zhang.github.io/2016/11/04/linux-text-sed命令整理/","excerpt":"stream editor: 流式文本编辑器;sed 命令的侧重点在于对文本的编辑;","text":"stream editor: 流式文本编辑器;sed 命令的侧重点在于对文本的编辑; sed 的基本模式123456# 标准模式: 选项, 目标行范围, 命令sed [-nefri] '[target line]command' $file_path# 正则模式: 选项, 正则匹配式, 命令sed [-nefri] '/regex/command' $file_path# 混合模式: 选项, 目标行与正则式组合范围, 命令sed [-nefri] 'line,/regex/command' $file_path sed 的常用选项123456781. -n: silent 静默模式, 只输出被 sed 处理过的行;2. -e: --expression, 指定命令, 可以使用多个 -e 执行多个命令: sed -e '$d' -e '/regex/p' $file_path3. -f: 执行给定文件里的命令;4. -r: --regexp-extended, 使 sed 支持拓展的正则表达式语法, 拓展的正则表达式较常规的正则表达式增加支持了如下语法: +, ?, |, () 由于这些拓展语法也非常常见, 所以推荐若使用 sed 的 regex 功能时带上 -r 选项;5. -i: 直接在指定的文件里修改编辑, stdout 不输出任何内容; sed 的 command123456789101. i: insert 到 目标行的上一行2. a: append 到 目标行的下一行 3. c: replace, 不能使用正则表达式4. s: replace, 使用正则表达式, 一般需要与 -r 配合使用, 模式为: s/regex/new_str/g, 替换文件中所有的 regex; s/regex/new_str, 只替换每行第一个被匹配上的 regex; s/regex/new_str/p, 如果某行被匹配上了就打印出来, 常与 -n 选项一同使用;5. d: delete6. p: print, 一般需要与 -n 选项一同使用, 否则看不出打印效果7. y: 按每个字符映射, 模式案例: y/1234567890/ABCDEFGHIJ/ 典型示例12345678# 打印最后一行sed -n '$p' $file_path# 指定两种操作, 删除9到最后一行, 以及向1到3行后追加 'append' 字符串sed -i -e '9,$d' -e '1,3a append' $file_path# 正则表达式替换(替换全部 regex)sed -ri 's/^(test|ping)[a-z]+.$/kill/g' $file_path# 打印从第9行开始到以 test 结尾的行之间的每一行sed -n '9,/test$/p' $file_path 1234# 结合变量, 往最后一行添加一行内容# 需使用\"\", 同时表示最后一行的 $ 需要转义cron_str='5 * * * * sh /home/q/tools/bin/log_collect.sh 1&gt;/dev/null'sed \"\\$a $&#123;cron_str&#125;\" /var/spool/cron/root 参考链接 linux之sed用法 linux sed命令详解","categories":[{"name":"linux","slug":"linux","permalink":"https://zshell-zhang.github.io/categories/linux/"},{"name":"text","slug":"linux/text","permalink":"https://zshell-zhang.github.io/categories/linux/text/"}],"tags":[{"name":"linux:text","slug":"linux-text","permalink":"https://zshell-zhang.github.io/tags/linux-text/"}]},{"title":"bash 条件判断全梳理","slug":"linux-shell--bash条件判断全梳理","date":"2016-09-01T09:52:36.000Z","updated":"2018-01-20T13:10:27.025Z","comments":true,"path":"2016/09/01/linux-shell--bash条件判断全梳理/","link":"","permalink":"https://zshell-zhang.github.io/2016/09/01/linux-shell--bash条件判断全梳理/","excerpt":"本文基于 GNU bash, version 4.1.2(1)-release (x86_64-redhat-linux-gnu)","text":"本文基于 GNU bash, version 4.1.2(1)-release (x86_64-redhat-linux-gnu) bash 条件判断 的类型与逻辑运算符字符串比较 =同==, 相同为真; !=, 不相同为真; -z, 长度为0(空)为真; -n, 长度不为0(非空)为真; &lt;, 按字典序小于为真; &gt;, 按字典序大于为真; 整数比较 -eq, equals, 相等为真; -ne, not equals, 不相等为真; -gt, greater than, 大于为真; -ge, greater equals, 大于等于为真; -lt, less than, 小于为真; -le, less equals, 小于等于为真; &gt;, 大于; &gt;=, 大于等于; &lt;, 小于; &lt;=, 小于等于; ==, 等于; !=, 不等于; 文件比较 -e, exists, 文件存在为真 -r, read, 用户可读为真 -w, write, 用户可写为真 -x, execute, 用户可执行为真 -f, file, 文件为正规文件为真 -d, directory, 文件为目录为真 -L, link, 文件为链接文件为真 -c, char, 文件为字符特殊文件为真 -b, block, 文件为块特殊文件为真 -s, 文件大小非0时为真 -t, 当文件描述符(默认为1)指定的设备为终端时为真 -nt, newer than, 更新时间更晚为真; -ot, older than, 更新时间更早为真; 逻辑比较 -a, and, 逻辑与; -o, or, 逻辑或; !, 逻辑非; &amp;&amp;, 逻辑与( 支持短路 ); ||, 逻辑或( 支持短路 ); &nbsp; bash 条件判断 的命令(关键字)与语法test 与 [ ]test 与 [ 是 shell 的内置命令;test 和 [] 可以用于比较字符串, 整数, 文件, test expr与[ expr ]有等价的效果; 字符串比较test可以使用=, ==, !=比较, bash 4.1版本下也能使用-n, -z比较字符串( 旧版本可能不支持该方式 );[]可以使用上述全部的比较符号;12if !test $str1 == $str2; then ... ; fiif ! [ $str1 == $str2 ]; then ... ; fi test 与 [] 也可以使用 &lt; 和 &gt; 作字符串比较; 但是有一点要注意, test和[是 shell 的内置命令, 使用 &lt; 和 &gt; 需要转义, 否则会被当成重定向; 整数比较test和[]均可以使用-eq, -gt, -ge, -lt, -le, -ne 作整数比较, 但不能使用 &gt;, &gt;=, &lt;, &lt;=,==,!= 等比较运算符;使用&lt;,&gt;,==,!=虽然语法不会报错, 但是会被当成字符串以字典序比较, 不能确保结果的正确性;12if test $1 -le 0; then ... ; fiif [ $1 -le 0 ]; then ... ; fi 文件比较test和[]均可以使用-e, -r, -w, -x等文件比较逻辑;12if test -e /usr/local/localtime; then ... ; fiif [ -e /usr/local/localtime ]; then ... ; fi 逻辑比较test和[]只能使用-a, -o和!运算符, 但-a和-o 不支持逻辑短路;12if !test $str1 == $str2 -a -n $str3; then ... ; fiif [ $str1 == $str2 -a -n $str3 ]; then ... ; fi test的返回值test可以独立于if使用, 其执行结果( 0为真, 1为假 )可以使用$?来接收;1test -z \"$1\"; echo \"$?\" bash关键字 [[ ]] ( 推荐使用 )[[ 是 bash 的关键字, 而不是命令;[[ ]] 比 [] 更通用, 更安全, 功能更强大; 在生产环境中, 推荐使用 [[ ]]; 字符串比较[[ ]] 除了可以使用基本的 =, ==, !=, -n, -z 之外, 其 =,== 和 !=还有通配符模式匹配的功能:12# 模式串不能加双引号, 否则会被当作普通串if [[ \"test\" == t* ]]; then ... ; fi [[ ]] 还可以使用支持正则表达式的 =~ 运算符:12# 模式串不能加双引号, 否则会被当作普通串if [[ \"test\" =~ ^t[a-z].t$ ]]; then ... ; fi [[ ]]也可以使用&lt;和&gt;作字符串比较; 由于[[是bash内置的关键字, &lt;和&gt;并不会被当成重定向, 所以可以不需要转义; 整数比较和test, []一样, [[ ]]可以使用-eq, -gt, -ge, -lt, -le, -ne 作整数比较, 但不能使用 &gt;, &gt;=, &lt;, &lt;=,==,!= 等比较运算符; 不能使用的原因也是一样的(当成字符串来处理了); 算术拓展[[]]支持算术拓展, 但是其对整数比较支持度较差, 算术拓展可能是一个鸡肋功能, 而且运算符与运算数之间不能有空格:1if [[ 1+1 -eq 2 ]]; then ... ; fi 此功能不推荐使用; 文件比较和test, []一样, [[ ]]可以使用-e, -r, -w, -x等文件比较逻辑; 逻辑比较[[ ]]只能使用&amp;&amp;, ||, !运算符, 且&amp;&amp;和||支持逻辑短路; (( ))的使用场景无论是test, []还是[[ ]], 都不能很好地使用&lt;和&gt;处理整数的比较运算;所以通常使用(())来处理整数的比较运算;(())可以使用&gt;, &gt;=, &lt;, &lt;=,==,!=运算符;1if (( 1 + 1 == 2 )); then ... ; fi 使用(())的时候, 如果使用到了变量, 可以不需要加上$符号; &nbsp; 总结 - test 与 [ ] [[ ]] (( )) 字符串比较 =, ==, !=, -n, -z, \\&lt;, \\&gt; =, ==, !=, -n, -z, &lt;, &gt; 不支持 整数比较 -eq, -gt, -ge, -lt, -le, -ne -eq, -gt, -ge, -lt, -le, -ne >, &gt;=, &lt;, &lt;=, ==, != 文件比较 -e, -r, -w, -x, -f, -d, -L, -s, -b, -c, -t, -nt, -ot -e, -r, -w, -x, -f, -d, -L, -s, -b, -c, -t, -nt, -ot 不支持 逻辑比较 -a, -o, ! &amp;&amp;, &#124;&#124;, ! &amp;&amp;, &#124;&#124;, ! &nbsp; 参考链接","categories":[{"name":"linux","slug":"linux","permalink":"https://zshell-zhang.github.io/categories/linux/"},{"name":"shell","slug":"linux/shell","permalink":"https://zshell-zhang.github.io/categories/linux/shell/"}],"tags":[{"name":"linux:shell","slug":"linux-shell","permalink":"https://zshell-zhang.github.io/tags/linux-shell/"}]},{"title":"git 忽略文件的特殊场景","slug":"tools-git--git忽略文件的特殊场景","date":"2016-07-14T15:17:24.000Z","updated":"2018-01-20T13:29:38.068Z","comments":true,"path":"2016/07/14/tools-git--git忽略文件的特殊场景/","link":"","permalink":"https://zshell-zhang.github.io/2016/07/14/tools-git--git忽略文件的特殊场景/","excerpt":"git 忽略文件, 其实有两种场景: 永久忽略 与 临时忽略;使用 .gitignore 在最刚开始时永久忽略指定文件是最常见的处理, 但是偶尔也会遇到特殊情况:1.一时疏忽, 将本该忽略的文件提交追踪了;2.需要临时忽略某指定文件, 一段时间后再继续追踪;本文将讨论以上两种情况下的 git 处理;","text":"git 忽略文件, 其实有两种场景: 永久忽略 与 临时忽略;使用 .gitignore 在最刚开始时永久忽略指定文件是最常见的处理, 但是偶尔也会遇到特殊情况:1.一时疏忽, 将本该忽略的文件提交追踪了;2.需要临时忽略某指定文件, 一段时间后再继续追踪;本文将讨论以上两种情况下的 git 处理; 永远忽略已被跟踪的文件适用场景:手误上传了不需要上传的文件, 希望斩草除根, 以后不让 git 追踪该文件;1234# first stepgit rm --cached file_path/# second stepupdate .gitignore to exclude target file &nbsp; 临时忽略已被跟踪的文件适用场景:目标文件庞大, 每次修改保存时, git 计算文件的变化并更新 working directory, 触发磁盘IO瓶颈;所以需要临时忽略文件, 待修改完成 commit 时恢复跟踪;12345# first stepgit update-index --assume-unchanged file_path/# 编辑文件...# seconde stepgit update-index --no-assume-unchanged file_path/ &nbsp; 参考链接 git忽略已经被提交的文件","categories":[{"name":"tools","slug":"tools","permalink":"https://zshell-zhang.github.io/categories/tools/"},{"name":"git","slug":"tools/git","permalink":"https://zshell-zhang.github.io/categories/tools/git/"}],"tags":[{"name":"tools:git","slug":"tools-git","permalink":"https://zshell-zhang.github.io/tags/tools-git/"}]}]}